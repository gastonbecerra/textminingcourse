---
title: "wikipedia"
format: html
editor: visual
---

## Example 1: Wikipedia API

We will explore Wikipedia API. We are interested in this API for 2 reasons: (1) it does not require authentication... at least for the type of request that we are going to be making; and (2) there is no R package to interact with it, so we are going to do it manually. To make requests by HTTP, we will use `httr`.

The steps involved:

-   We are going to make a request, composing a URL and calling it by GET (a method of the HTTP protocol, which you use all the time to navigate);

-   We are going to read the response, which is in JSON format, and we are going to see how we can convert it to a more comfortable format with R.

First of all, we need to know what kind of requests can be made (what can I ask the API). All applications have an API Reference that makes this clear; others, more cool, have an Explorer API that allows you to "compose" the request parameters with forms and explore the results. Wikipedia, luckily, is one of them: <https://es.wikipedia.org/wiki/Especial:Zona_de_tests_de_la_API>.

The first thing we are going to do is look for entries that include the words "big data".

To make this request it is necessary to know how to compose the URL. In the case of Wikipedia, this is made up of a base URL (`https://es.wikipedia.org/w/api.php?`) followed by the action we are interested in performing: "query" because we are going to search for pages (`&action= wanted`). This action requires a criteria (`&srsearch=big%20data`) and that we specify what to return and in what format (`&list=search&format=json`):

More info: [https://es.wikipedia.org/w/api.php?action=query&list=search&srsearch=big%20data&format=json](https://es.wikipedia.org/w/api.php?action=query&list=search&srsearch =big%20data&format=json)

```{r}

library(tidyverse)
library(httr)

criteria <- "big%20data" 
url <- httr::GET(paste0("https://en.wikipedia.org/w/api.php?action=query&list=search&format=json&srsearch=", criteria))

url$status_code # 200: OK

```

Let's look at a piece of the response, which is in JSON format:

`{`

`batchcomplete: "",`

`continue: {`

`sroffset: 10,`

`continue: "-||"`

`},`

`query: {`

`searchinfo: {`

`totalhits: 6783`

`},`

`search: [`

`{`

`ns: 0,`

`title: "Macrodatos",`

`pageid: 5242736,`

`size: 115077,`

`wordcount: 13491,`

`snippet: "también llamados datos masivos, inteligencia de datos, datos a gran escala o <span class="searchmatch">big</span> <span class="searchmatch">data</span> (terminología en idioma inglés utilizada comúnmente) es un término que",`

`timestamp: "2021-06-03T16:23:33Z"`

`},`

`{`

`ns: 0,`

`title: "Big Bang",`

`pageid: 6822,`

`size: 71060,`

`wordcount: 9270,`

`snippet: "En cosmología, se entiende por <span class="searchmatch">Big</span> Bang,[1]​[2]​ también llamada la Gran Explosión (término proveniente del astrofísico Fred Hoyle a modo de burla de",`

`timestamp: "2021-06-12T03:48:05Z"`

`},`

`…`

This content can be accessed through the content of the object generated by `httr::GET`. This function converts the JSON to a list, i.e. a collection of objects in R. This list has 4 elements: `batchcomplete` and `continue` are used to paginate the results; `query` which in turn has 2 elements: first it reports how many results there were; and then in `search` includes the results.

Let's see how we can access this JSON:

```{r}

response <- httr::content(x = url) 
class(response) # should be a list
results <- response[["query"]][["search"]] # we are interested in query > search

```

#### E
